type: edu
custom_name: stage6
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult

    import os
    import shutil

    from colorama import Fore

    import sys
    if sys.platform.startswith("win"):
        import _locale
        # pylint: disable=protected-access
        _locale._getdefaultlocale = (lambda *args: ['en_US', 'utf8'])

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class TextBasedBrowserTest(StageTest):

        def generate(self):

            dir_for_files = os.path.join(os.curdir, 'tb_tabs')
            return [
                TestCase(
                    stdin='2.python-requests.org\nexit',
                    attach='requests',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='en.wikipedia.org\nwiki\nexit',
                    attach='Wikipedia',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='nytimescom\nexit',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='bloombergcom\nexit',
                    args=[dir_for_files]
                ),
            ]

        def _check_files(self, path_for_tabs: str, right_word: str) -> bool:
            """
            Helper which checks that browser saves visited url in files and
            provides access to them.

            :param path_for_tabs: directory which must contain saved tabs
            :param right_word: Word-marker which must be in right tab
            :return: True, if right_words is present in saved tab
            """

            path, dirs, filenames = next(os.walk(path_for_tabs))

            for file in filenames:

                with open(os.path.join(path_for_tabs, file), 'r', encoding='utf-8') as tab:
                    content = tab.read()

                    if '</p>' not in content and '</script>' not in content:
                        if '</div>' not in content and right_word in content:
                            return True

            return False

        def check(self, reply, attach):

            # Incorrect URL
            if attach is None:
                if '<p>' in reply:
                    return CheckResult.wrong('You haven\'t checked was URL correct')
                else:
                    return CheckResult.correct()

            # Correct URL
            if isinstance(attach, str):
                right_word = attach

                path_for_tabs = os.path.join(os.curdir, 'tb_tabs')

                if not os.path.isdir(path_for_tabs):
                    return CheckResult.wrong("There are no directory for tabs")

                if not self._check_files(path_for_tabs, right_word):
                    return CheckResult.wrong('There are no correct saved tabs')

                shutil.rmtree(path_for_tabs)

                if not Fore.BLUE in reply:
                    return CheckResult.wrong('There are no blue refs in output')

                if '</p>' not in reply and '</div>' not in reply:
                    if right_word in reply:
                        return CheckResult.correct()

                return CheckResult.wrong('You haven\'t parsed result of request')


    TextBasedBrowserTest('browser.browser').run_tests()
  learner_created: false
- name: browser/browser.py
  visible: true
  text: |
    import sys
    import os
    import collections
    import requests
    import bs4


    # write your code here
    TAGS = {
        'p': {'block': True},
        'h1': {'block': True},
        'h2': {'block': True},
        'h3': {'block': True},
        'h4': {'block': True},
        'h5': {'block': True},
        'h6': {'block': True},
        'ul': {'block': True},
        'ol': {'block': True},
        'li': {'block': True},
        'a': {'block': False},
        'title': {'block': True}
    }



    def run():

        store_dir = sys.argv[1]
        if not os.path.exists(store_dir):
            os.mkdir(store_dir)
        history = collections.deque()
        current = None

        while True:
            # print(f"State: {current}; {history}")
            cmd = input()
            if cmd == 'exit':
                break

            text, current = get_text(cmd, store_dir, history, current)

            if text:
                print(text)
            else:
                print("Error: Incorrect URL")


    def get_text(cmd, store_dir, history, current):
        if cmd == 'back':
            cmd = go_back(history)
            if not cmd:
                return None, current
        elif current:
            history.append(current)

        text = get_stored(cmd, store_dir)
        if text:
            return text, cmd

        if is_url(cmd):
            text = get_url(cmd)
            if text:
                text = render(text)
                st_name = store(cmd, text, store_dir)
                return text, st_name

        return None, cmd


    def go_back(history):
        if len(history) > 0:
            return history.pop()
        return None


    def get_stored(cmd, store_dir):
        path = store_dir + '/' + cmd
        if os.path.exists(path):
            with open(path, 'r') as f:
                return f.read()
        return None


    def is_url(cmd):
        return '.' in cmd


    def get_url(url):
        url = clean_url(url)
        r = requests.get(url)
        return r.text


    def clean_url(url):
        return url if url.startswith("https://") else "https://" + url


    def store(url, text, store_dir):
        name = store_name(url)
        with open(store_dir + '/' + name, 'w') as f:
            f.write(text)
        return name


    def store_name(url):
        s = url[8:] if url.startswith("https://") else url
        return s[:s.rindex('.')]


    def render(html):
        soup = bs4.BeautifulSoup(html, features="html.parser")
        return render_tag(soup.html)


    def render_tag(tag):
        if tag.name in TAGS.keys():
            newline = TAGS[tag.name]['block']
            return render_tag_text(tag, withtext=True, newline=newline)
        return render_tag_text(tag, withtext=False, newline=False)


    def render_tag_text(p, withtext, newline):
        text = ''
        for part in p.contents:
            text += render_content(part, withtext=withtext)
        return text + ('\n' if newline else '')


    def render_content(part, withtext):
        if isinstance(part, bs4.element.NavigableString):
            return str(part).strip() if withtext else ''
        return render_tag(part)


    #print(render("<body><h1>h1</h1><p><a>1</a></p><p><a>2</a></p></body>"))
    run()
  learner_created: true
- name: browser/store/nytimes
  visible: true
  learner_created: true
- name: browser/store/docs.python
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/79/stages/441/implement
status: Solved
record: -1
