type: edu
custom_name: stage5
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class CalcTest(StageTest):
        def generate(self) -> List[TestCase]:
            cases = {"100 + 200 - 300\n/exit": "0\nBye!",
                     "4 + 6 - 8\n\n\n2 - 3 - 4\n\n8 + 7 - 4\n/exit": "2\n-5\n11\nBye!",
                     "abc\n123+\n+15\n18 22\n\n-22\n22-\n/exit": "Invalid expression\nInvalid expression\n15\nInvalid expression\n-22\nInvalid expression\nBye!",
                     "/go\n/exit": "Unknown command\nBye!"}
            return [TestCase(stdin=case,
                             attach=cases[case])
                    for case in cases]

        def check(self, reply: str, attach) -> CheckResult:
            return CheckResult(reply.strip() == attach.strip(), "")


    if __name__ == '__main__':
        CalcTest("calculator.calculator").run_tests()
  learner_created: false
- name: calculator/calculator.py
  visible: true
  text: |
    # write your code here

    CMD_EXIT = "exit"
    CMD_HELP = "help"


    def main():
        while True:
            cmd, expr = read_input()
            if cmd:
                stop = do_cmd(cmd)
                if stop:
                    break
            if len(expr) > 0:
                process(expr)
        print('Bye!')


    def read_input():
        line = input().strip()
        if line.startswith('/'):
            return line[1:], []
        tokens = line.split()
        if len(tokens) >= 1:
            return None, tokens
        return None, []


    def do_cmd(cmd):
        if cmd == CMD_EXIT:
            return True
        if cmd == CMD_HELP:
            print_help()
        return False


    def print_help():
        print('The program calculates expressions with additions and subtractions')


    def process(expr):
        buf = None
        op = None
        for term in expr:
            if not buf:
                buf = int(term)
            elif not op:
                op = simplify_op(term)
            else:
                buf = evaluate(op, buf, int(term))
                op = None
        print(buf)


    def simplify_op(op):
        if op.startswith("+"):
            return "+"
        if op.startswith("-"):
            return "-" if op.count("-") % 2 == 1 else "+"
        return None


    def evaluate(op, a, b):
        if op == "-":
            return a - b
        if op == "+":
            return a + b
        return None


    main()
  learner_created: true
feedback_link: https://hyperskill.org/projects/74/stages/413/implement
status: Solved
record: 5
