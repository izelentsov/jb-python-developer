type: edu
custom_name: stage7
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class CalcTest(StageTest):
        def generate(self) -> List[TestCase]:
            cases = {"4 + 6 - 8\n\n\n2 - 3 - 4\n\n8 + 7 - 4\n1 +++ 2 * 3 -- 4\n/exit": "2\n-5\n11\n11\nBye!",
                     "/command\n/exit": "Unknown command\nBye!",
                     "3 + 8 * ((4 + 3) * 2 + 1) - 6 / (2 + 1)\n/exit": "121\nBye!",
                     "8 * 3 + 12 * (4 - 2)\n4 * (2 + 3\n4 + 3)\n/exit": "48\nInvalid expression\nInvalid expression\nBye!",
                     "a = 4\nb = 5\nc = 6\na*2+b*3+c*(2+3)\n/exit": "53\nBye!",
                     "a = 1\na = 2\na = 3\na\n/exit": "3\nBye!"}
            return [TestCase(stdin=case,
                             attach=cases[case])
                    for case in cases]

        def check(self, reply: str, attach) -> CheckResult:
            return CheckResult(reply.strip() == attach.strip(), "")


    if __name__ == '__main__':
        CalcTest("calculator.calculator").run_tests()
  learner_created: false
- name: calculator/calculator.py
  visible: true
  text: |
    # write your code here

    TYPE_NONE = 0
    TYPE_CMD = 1
    TYPE_ASSIGN = 2
    TYPE_EXPR = 3

    CMD_EXIT = "exit"
    CMD_HELP = "help"


    def main():
        var = {}
        while True:
            inp_type, inp = read_input()
            stop = process_input(inp_type, inp, var)
            if stop:
                break
        print('Bye!')


    def read_input():
        line = input().strip()
        if line.startswith('/'):
            return TYPE_CMD, line[1:]
        if len(line) == 0:
            return TYPE_NONE, None
        if "=" in line:
            return TYPE_ASSIGN, line
        return TYPE_EXPR, line


    def process_input(inp_type, inp, var):
        stop = False
        if inp_type == TYPE_CMD:
            stop = do_cmd(inp)
        elif inp_type == TYPE_ASSIGN:
            try_process_assign(inp, var)
        elif inp_type == TYPE_EXPR:
            try_process_expr(inp, var)
        return stop


    def do_cmd(cmd):
        if cmd == CMD_EXIT:
            return True
        if cmd == CMD_HELP:
            print_help()
        else:
            print("Unknown command")
        return False


    def print_help():
        print('The program calculates expressions with additions and subtractions')


    def try_process_assign(inp, var):
        toks = inp.split(sep='=')
        if len(toks) != 2:
            print("Invalid assignment")
            return
        left = toks[0].strip()
        right = toks[1].strip()
        if not is_valid_identifier(left):
            print("Invalid identifier")
            return
        if not is_int_literal(right) and not is_valid_identifier(right):
            print("Invalid assignment")
            return
        rval = value_of_term(right, var)
        if rval is not None:
            var[left] = rval


    def is_valid_identifier(term):
        return all(c.isalpha() for c in term)


    def try_process_expr(expr, var):
        res = None
        try:
            res = evaluate_expr(expr, var)
        except ValueError:
            print("Invalid expression")
            res = None
        finally:
            if res is not None:
                print(res)


    def evaluate_expr(expr, var):
        buf = None
        op = None
        toks = expr.split()
        for term in toks:
            if not buf:
                buf = value_of_term(term, var)
                if buf is None:
                    return None
            elif not op:
                op = simplify_op(term)
                if not op:
                    print("Invalid expression")
                    return None
            else:
                val2 = value_of_term(term, var)
                if val2 is None:
                    return None
                buf = evaluate(op, buf, val2)
                op = None
        return buf


    def value_of_term(term, var):
        if is_int_literal(term):
            return int(term)
        if is_known_var(term, var):
            return var[term]
        print("Unknown variable")
        return None


    def is_int_literal(term):
        return all(c.isdigit() for c in term)


    def is_known_var(v, var):
        return v in var


    def simplify_op(op):
        if op.startswith("+") and all(c == "+" for c in op):
            return "+"
        if op.startswith("-") and all(c == "-" for c in op):
            return "-" if op.count("-") % 2 == 1 else "+"
        return None


    def evaluate(op, a, b):
        if op == "-":
            return a - b
        if op == "+":
            return a + b
        return None


    main()
  learner_created: true
feedback_link: https://hyperskill.org/projects/74/stages/415/implement
status: Solved
record: -1
